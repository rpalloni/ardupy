from django.shortcuts import render, HttpResponse
from django.views.decorators.csrf import csrf_exempt # headers: {'X-CSRFToken': '{{ csrf_token }}'}
from django.http import QueryDict, JsonResponse
from .models import SensorData


def home(request):
    return render(request, 'home.html')


# endpoint for arduino http://192.168.1.105:8080/store/
@csrf_exempt
def store_data(request):
    data = request.POST # <QueryDict: {'temperature': ['27.70'], 'humidity': ['54.50'], 'hic': ['28.50']}>
    # print(QueryDict.dict(data))
    d = SensorData.objects.create(
        # time=generated by models
        data=QueryDict.dict(data)
    )
    d.save()
    return HttpResponse(f"Ok, data received: {QueryDict.dict(data)}") # response to Arduino

# endpoint for browser http://192.168.1.105:8080/fetch/
def fetch_data(request):
    d = SensorData.objects.all()
    data = {"dhtdata": list(d.values())} # .values("pk", "name")
    response = JsonResponse(data) # serialize data
    # return render(request, 'view_data.html', {'dataset': dhtdata})
    # print(type(data))
    # print(data)
    # return render(request, 'view_data.html', {'dataset': data})
    # print(type(response))
    # print(response)
    return response

# endpoint for browser http://192.168.1.105:8080/view/
def view_plot(request):
    return render(request, 'view_plot.html') # ajax engine to call chart_data

def chart_data(request):
    d = SensorData.objects.all()
    data = {"dhtdata": list(d.values())}
    # compose a dict with the whole set of information to create the plot
    # input for Highcharts.chart() function
    chart = {
        'title': {'text': 'DHT22 Sensor Data - Powered by Arduino'},
        'series': [
            {
                'name': 'Temperature (C°)',
                'data': list(map(lambda x: float(x['data']['temperature']), [d for d in data['dhtdata']]))
            },
            {
                'name': 'HIC (C°)',
                'data': list(map(lambda x: float(x['data']['hic']), [d for d in data['dhtdata']]))
            },
            # {
            #     'name': 'Humidity (%)',
            #     'data': list(map(lambda x: float(x['data']['humidity']), [d for d in data['dhtdata']]))
            # }
        ],
        'xAxis': {
            'categories': list(map(lambda x: x['time'], [d for d in data['dhtdata']])),
            'labels':{
                'rotation': 90,
            }
        },
    }

    return JsonResponse(chart)
